{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nfunction updateTilt(particle, delta) {\n  var _a, _b;\n  if (!particle.tilt || !particle.options.tilt) {\n    return;\n  }\n  const tilt = particle.options.tilt,\n    tiltAnimation = tilt.animation,\n    speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n    max = 2 * Math.PI,\n    decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\n  if (!tiltAnimation.enable) {\n    return;\n  }\n  switch (particle.tilt.status) {\n    case \"increasing\":\n      particle.tilt.value += speed;\n      if (particle.tilt.value > max) {\n        particle.tilt.value -= max;\n      }\n      break;\n    case \"decreasing\":\n    default:\n      particle.tilt.value -= speed;\n      if (particle.tilt.value < 0) {\n        particle.tilt.value += max;\n      }\n      break;\n  }\n  if (particle.tilt.velocity && decay !== 1) {\n    particle.tilt.velocity *= decay;\n  }\n}\nexport class TiltUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  getTransformValues(particle) {\n    var _a;\n    const tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\n    return {\n      b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n      c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n    };\n  }\n  init(particle) {\n    var _a;\n    const tiltOptions = particle.options.tilt;\n    if (!tiltOptions) {\n      return;\n    }\n    particle.tilt = {\n      enable: tiltOptions.enable,\n      value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: getRandom() >= 0.5 ? 1 : -1,\n      cosDirection: getRandom() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n    if (tiltDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n    switch (tiltDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.tilt.status = \"decreasing\";\n        break;\n      case \"clockwise\":\n        particle.tilt.status = \"increasing\";\n        break;\n    }\n    const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n    if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\n      particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        particle.tilt.velocity *= getRandom();\n      }\n    }\n  }\n  isEnabled(particle) {\n    var _a;\n    const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n    return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\n  }\n  loadOptions(options) {\n    if (!options.tilt) {\n      options.tilt = new Tilt();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateTilt(particle, delta);\n  }\n}","map":{"version":3,"names":["getRandom","getRangeValue","Tilt","updateTilt","particle","delta","_a","_b","tilt","options","tiltAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","TiltUpdater","constructor","container","getTransformValues","b","cos","cosDirection","undefined","c","sin","sinDirection","init","tiltOptions","tiltDirection","direction","index","floor","retina","reduceFactor","sync","isEnabled","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","source","load","update"],"sources":["C:/Users/tejas/OneDrive/Desktop/face-recognition/frontend/node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue } from \"tsparticles-engine\";\r\nimport { Tilt } from \"./Options/Classes/Tilt\";\r\nfunction updateTilt(particle, delta) {\r\n    var _a, _b;\r\n    if (!particle.tilt || !particle.options.tilt) {\r\n        return;\r\n    }\r\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\r\n    if (!tiltAnimation.enable) {\r\n        return;\r\n    }\r\n    switch (particle.tilt.status) {\r\n        case \"increasing\":\r\n            particle.tilt.value += speed;\r\n            if (particle.tilt.value > max) {\r\n                particle.tilt.value -= max;\r\n            }\r\n            break;\r\n        case \"decreasing\":\r\n        default:\r\n            particle.tilt.value -= speed;\r\n            if (particle.tilt.value < 0) {\r\n                particle.tilt.value += max;\r\n            }\r\n            break;\r\n    }\r\n    if (particle.tilt.velocity && decay !== 1) {\r\n        particle.tilt.velocity *= decay;\r\n    }\r\n}\r\nexport class TiltUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    getTransformValues(particle) {\r\n        var _a;\r\n        const tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\r\n        return {\r\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\r\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\r\n        };\r\n    }\r\n    init(particle) {\r\n        var _a;\r\n        const tiltOptions = particle.options.tilt;\r\n        if (!tiltOptions) {\r\n            return;\r\n        }\r\n        particle.tilt = {\r\n            enable: tiltOptions.enable,\r\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\r\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\r\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\r\n        };\r\n        let tiltDirection = tiltOptions.direction;\r\n        if (tiltDirection === \"random\") {\r\n            const index = Math.floor(getRandom() * 2);\r\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\r\n        }\r\n        switch (tiltDirection) {\r\n            case \"counter-clockwise\":\r\n            case \"counterClockwise\":\r\n                particle.tilt.status = \"decreasing\";\r\n                break;\r\n            case \"clockwise\":\r\n                particle.tilt.status = \"increasing\";\r\n                break;\r\n        }\r\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\r\n        if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\r\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\r\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\r\n            if (!tiltAnimation.sync) {\r\n                particle.tilt.velocity *= getRandom();\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        var _a;\r\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\r\n        return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\r\n    }\r\n    loadOptions(options, ...sources) {\r\n        if (!options.tilt) {\r\n            options.tilt = new Tilt();\r\n        }\r\n        for (const source of sources) {\r\n            options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateTilt(particle, delta);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}